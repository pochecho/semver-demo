{"version":3,"file":"main.js","mappings":"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","sources":["webpack://sadala/webpack/universalModuleDefinition","webpack://sadala/./src/base.component.ts","webpack://sadala/./src/component-name-resolver.ts","webpack://sadala/./src/helpers/DOMHelpers.ts","webpack://sadala/./src/helpers/GeneralHelpers.ts","webpack://sadala/./src/helpers/LoggingHelper.ts","webpack://sadala/./src/lifecycle/lifecycle.ts","webpack://sadala/./src/lifecycle/lifecycleManager.ts","webpack://sadala/./src/lifecycle/stages/attributeHomologationStageHandler.ts","webpack://sadala/./src/lifecycle/stages/stateInitializationStageHandler.ts","webpack://sadala/./src/resolvers/styles/scss-styles.resolver.ts","webpack://sadala/./src/resolvers/styles/styles.resolver.ts","webpack://sadala/./src/resolvers/templates/HTMLTemplate.resolver.ts","webpack://sadala/./src/resolvers/templates/template.resolver.ts","webpack://sadala/./src/resolvers/templates/view-engine.ts","webpack://sadala/webpack/bootstrap","webpack://sadala/./src/main.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"sadala\"] = factory();\n\telse\n\t\troot[\"sadala\"] = factory();\n})(self, () => {\nreturn ","import { DOMHelpers } from \"./helpers/DOMHelpers\";\nimport { HTMLTemplateResolver } from \"./resolvers/templates/HTMLTemplate.resolver\";\nimport { TemplateResolver } from \"./resolvers/templates/template.resolver\";\nimport { SCSSStylesResolver } from \"./resolvers/styles/scss-styles.resolver\";\nimport { StylesResolver } from \"./resolvers/styles/styles.resolver\";\nimport { TemplateConfiguration } from \"./resolvers/templates/interfaces/template-configuration.interface\";\nimport { LoggingHelper } from \"./helpers/LoggingHelper\";\n\nimport { LifeCycleManager } from \"./lifecycle/lifecycleManager\";\nimport { AttributeChangedEvent } from \"./lifecycle/stages/attributeHomologationStageHandler\";\n\nexport interface BaseCallback {\n  callback: Function;\n  parameters: any[];\n  context: any;\n}\n\nexport interface AttributeListenersConfiguration {\n  [index: string]: OnUpdateAttributeConfiguration;\n}\nexport interface OnUpdateAttributeConfiguration {\n  callback: Function;\n}\n\nexport interface BaseConfiguration {\n  id?: string;\n}\n\nexport interface BaseState {\n  rendered: boolean;\n}\n\nexport interface DesingSystemConfiguration {\n  prefix: string;\n  logStatus?: boolean;\n}\n\nconst DEFAULT_DESIGN_SYSTEM_CONFIGURATION: DesingSystemConfiguration = {\n  prefix: \"sadala\",\n  logStatus: false,\n};\nexport abstract class BaseComponent<\n  Configuration extends BaseConfiguration,\n  State extends BaseState\n> extends HTMLElement {\n  stylesResolver: StylesResolver;\n  templateResolver: TemplateResolver;\n  domHelpers: DOMHelpers;\n  loggingHelper: LoggingHelper;\n\n  configurationRef: Configuration;\n\n  attributesNames!: Array<string>;\n\n  state!: State;\n\n  innerShadowDomRoot: ShadowRoot;\n\n  designSystemConfiguration: DesingSystemConfiguration;\n\n  lifeCycleManager: LifeCycleManager;\n\n  constructor(designSystemConfiguration: DesingSystemConfiguration) {\n    super();\n\n    this.designSystemConfiguration = !!designSystemConfiguration\n      ? {\n          ...DEFAULT_DESIGN_SYSTEM_CONFIGURATION,\n          ...designSystemConfiguration,\n        }\n      : DEFAULT_DESIGN_SYSTEM_CONFIGURATION;\n    this.state = {\n      rendered: false,\n      attributeHomologationCalls: [],\n    } as unknown as State;\n\n    this.innerShadowDomRoot =\n      this.shadowRoot || this.attachShadow({ mode: \"open\" });\n\n    this.stylesResolver = new SCSSStylesResolver();\n    this.domHelpers = new DOMHelpers();\n    this.templateResolver = new HTMLTemplateResolver(this.domHelpers);\n    this.loggingHelper = new LoggingHelper();\n    this.loggingHelper.isActive = !!this.designSystemConfiguration.logStatus;\n\n    this.lifeCycleManager = new LifeCycleManager(this);\n    this.configurationRef = {} as Configuration;\n  }\n\n  setUp() {\n    this.lifeCycleManager.runStages(\"after-connection\");\n  }\n\n  addBaseTemplate(configuration: TemplateConfiguration): void {\n    configuration.scope = this.state;\n\n    const baseTemplateHTML = this.templateResolver.getTemplate(configuration);\n    \n    baseTemplateHTML.forEach((node: Node) => {\n      this.innerShadowDomRoot.appendChild(node);\n    });\n\n    if (!!configuration.style) {\n      this.addStyleToShadowRoot(configuration.style, this.innerShadowDomRoot);\n    }\n  }\n\n  public spyAttribute(attributeName: string, callback: Function) {\n    this.addEventListener(AttributeChangedEvent.identifier, (event: any) => {\n      const attribute = event.detail[\"attribute\"];\n      if (attribute === attributeName) {\n        callback(event.detail);\n      }\n    });\n  }\n\n  public addStyleToShadowRoot(styles: any, shadowRoot: ShadowRoot) {\n    const formattedStyle = this.stylesResolver.formatStyles(styles);\n    const styleElement = document.createElement(\"style\");\n    styleElement.textContent = formattedStyle;\n    shadowRoot.appendChild(styleElement);\n  }\n  attributeChangedCallback(name: string, oldValue: any, newValue: any) {\n    this.lifeCycleManager.attributeHomologationStage.attributeChangedCallback(\n      name,\n      oldValue,\n      newValue\n    );\n  }\n\n  connectedCallback() {\n    this.setUp();\n  }\n}\n","export function resolveComponentName(prefix: string, componentClass: any) {\n  return `${prefix}-${componentClass.identifierName}`;\n}\n","export class DOMHelpers {\n  removeAllChildren(parent: HTMLElement) {\n    while (parent.lastChild) {\n      parent.removeChild(parent.lastChild);\n    }\n  }\n}\n","export function curry(fn: Function) {\n  return function curried(this: any, ...args: any[]) {\n    if (args.length >= fn.length) {\n      return fn.apply(this, args);\n    } else {\n      return function (this: any, ...args2: any[]) {\n        return curried.apply(this, args.concat(args2));\n      };\n    }\n  };\n}\n\nexport function clone(message: any) {\n  if (Array.isArray(message)) {\n    return [...message];\n  }\n  if (typeof message === \"object\") {\n    return { ...message };\n  }\n  return message;\n}\n","import { clone, curry } from \"./GeneralHelpers\";\n\nexport interface LogMessage {\n  date: Date;\n  message: string;\n}\n\nexport interface GroupMessage {\n  name: string;\n  messages: Array<LogMessage>;\n}\n\nexport class LoggingHelper {\n  private _historical: Array<LogMessage | GroupMessage>;\n  isActive: boolean;\n  private _group: GroupMessage | null;\n  constructor() {\n    this._historical = [];\n    this.isActive = false;\n    this._group = null;\n  }\n  group(name: string) {\n    this._group = {\n      name,\n      messages: [],\n    };\n  }\n  groupEnd() {\n    const clonedGroup = clone(this._group);\n    this._group = null;\n    this._historical.push(clonedGroup);\n  }\n  log = curry((message: any) => {\n    if (this.isActive) {\n      let persist = this._historical;\n      if (!!this._group) {\n        persist = this._group.messages;\n      }\n      persist.push({\n        date: new Date(),\n        message: clone(message),\n      });\n    }\n  });\n  get historical() {\n    return this._historical;\n  }\n\n  get historicalReport() {\n    return JSON.stringify(this.historical, null, 2);\n  }\n}\n","export const lifeCycleOrder = [\n  \"attribute-homologation\",\n  \"state-initialization\",\n  \"template-configuration\",\n];\nexport enum LifeCycleStages {\n  attributeHomologation = \"attribute-homologation\",\n  stateInitialization = \"state-initialization\",\n  TemplateConfiguration = \"template-configuration\",\n}\n\nexport type LifeCycleTriggers = \"before-connection\" | \"after-connection\";\nexport type LifeCycle = {\n  [index in LifeCycleStages]?: {\n    callback: Function;\n    trigger: LifeCycleTriggers;\n  };\n};\n","import { BaseComponent } from \"../base.component\";\nimport {\n  LifeCycle,\n  lifeCycleOrder,\n  LifeCycleStages,\n  LifeCycleTriggers,\n} from \"./lifecycle\";\nimport { AttributeHomologationStage } from \"./stages/attributeHomologationStageHandler\";\nimport { StateInitializationStage } from \"./stages/stateInitializationStageHandler\";\n\nexport class LifeCycleManager {\n  lifeCycle: LifeCycle;\n  component: BaseComponent<any, any>;\n\n  attributeHomologationStage: AttributeHomologationStage;\n  stateInitializationStage: StateInitializationStage;\n\n  constructor(component: BaseComponent<any, any>) {\n    this.component = component;\n\n    this.attributeHomologationStage = new AttributeHomologationStage(component);\n    this.stateInitializationStage = new StateInitializationStage(component);\n\n    this.lifeCycle = {\n      \"attribute-homologation\": {\n        callback: () => this.attributeHomologationStage.init(),\n        trigger: \"before-connection\",\n      },\n      \"state-initialization\": {\n        callback: () => this.stateInitializationStage.init(),\n        trigger: \"before-connection\",\n      },\n    };\n  }\n\n  runStages(trigger: LifeCycleTriggers) {\n    lifeCycleOrder.forEach((stageName: string) => {\n      const stage = this.lifeCycle[stageName as LifeCycleStages];\n      if (!!stage?.callback && stage.trigger === trigger) {\n        stage.callback();\n      }\n    });\n  }\n}\n","import { clone } from \"../../helpers/GeneralHelpers\";\nimport { BaseComponent } from \"../../base.component\";\nimport { StageHandler } from \"./stageHandler\";\n\nexport class AttributeChangedEvent {\n  static identifier = \"attribute-changed\";\n\n  static create(attribute: string, previousValue: any, value: any) {\n    return new CustomEvent(AttributeChangedEvent.identifier, {\n      cancelable: false,\n      detail: {\n        attribute,\n        previousValue: clone(previousValue),\n        value: clone(value),\n      },\n    });\n  }\n}\n\nexport class AttributeHomologationStage implements StageHandler {\n  component: BaseComponent<any, any>;\n  attributeHomologationCalls: Array<{\n    attributeName: string;\n    origin: \"programatic\" | \"inline\";\n    value: any;\n  }>;\n  constructor(component: BaseComponent<any, any>) {\n    this.component = component;\n    this.attributeHomologationCalls = [];\n\n    this.component.addEventListener(\n      AttributeChangedEvent.identifier,\n      (event: any) => {\n        const loggingObject: any = {\n          // Target: { ...target },\n          // Property: property,\n          // OldValue: target[property],\n          ...{...event.detail},\n        };\n        this.component.loggingHelper.group(\n          `Configuration Changed (Proxy) ${this.component.constructor.name}`\n        );\n        this.component.loggingHelper.log(loggingObject);\n        this.component.loggingHelper.groupEnd();\n      }\n    );\n  }\n  init() {\n    const emptyConfiguration = this.createDefaultConfiguration(\n      this.component.attributesNames\n    );\n\n    this.setConfiguration(emptyConfiguration);\n    // (this.component as any).attributeChangedCallback = (\n    //   name: string,\n    //   oldValue: any,\n    //   newValue: any\n    // ) => {\n    //   this.attributeChangedCallback(name, oldValue, newValue);\n    // };\n  }\n\n  private createDefaultConfiguration(attributeList: Array<string>) {\n    return attributeList.reduce((previousValue: any, currentValue: string) => {\n      previousValue[currentValue] = null;\n      return previousValue;\n    }, {});\n  }\n  private homologate(\n    name: string,\n    oldValue: any,\n    newValue: any,\n    previusCallKind: \"programatic\" | \"inline\",\n    callKind: \"programatic\" | \"inline\",\n    transformDataFunction: Function,\n    homologationFunction: Function\n  ) {\n    const isInAttributeHomologationCallsIndex =\n      this.attributeHomologationCalls.findIndex((x: any) => {\n        return x.attributeName === name;\n      });\n    const parsedValue = transformDataFunction(newValue);\n\n    if (isInAttributeHomologationCallsIndex >= 0) {\n      const previusCall =\n        this.attributeHomologationCalls[isInAttributeHomologationCallsIndex];\n\n      if (previusCall?.origin !== previusCallKind) {\n        this.component.configurationRef[name as string] = parsedValue;\n        this.component.dispatchEvent(\n          AttributeChangedEvent.create(name, clone(oldValue), clone(newValue))\n        );\n      } else {\n        this.attributeHomologationCalls.splice(\n          isInAttributeHomologationCallsIndex,\n          1\n        );\n      }\n    } else {\n      this.attributeHomologationCalls.push({\n        attributeName: name,\n        origin: callKind,\n        value: parsedValue,\n      });\n      homologationFunction(name, oldValue, newValue, parsedValue);\n    }\n  }\n\n  attributeChangedCallback(name: string, oldValue: any, newValue: any) {\n    this.homologate(\n      name,\n      oldValue,\n      newValue,\n      \"programatic\",\n      \"inline\",\n      (data: any) => this.fromString(data),\n      (name: string, oldValue: any, originValue: any, parsedValue: any) => {\n        this.component.dispatchEvent(\n          AttributeChangedEvent.create(name, oldValue, parsedValue)\n        );\n        this.component.state[name] = parsedValue;\n        this.component.configurationRef[name] = parsedValue;\n      }\n    );\n  }\n\n  toString(data: any) {\n    if (typeof data !== \"string\") {\n      return JSON.stringify(data);\n    }\n    return data;\n  }\n\n  fromString(data: string): any {\n    try {\n      const result = JSON.parse(data);\n      if (typeof result !== \"object\") {\n        return data;\n      }\n      return result;\n    } catch (error) {\n      return data;\n    }\n  }\n\n  private setConfiguration(configuration: any): any {\n    this.component.configurationRef = new Proxy(\n      { ...configuration },\n      {\n        set: (target, property, value) => {\n          if (value instanceof Promise) {\n            value.then((x) => {\n              this.perfomAction(x, property, {...target});\n              target[property] = x;\n            });\n          } else {\n            this.perfomAction(value, property, {...target});\n            target[property] = value;\n          }\n          return true;\n        },\n      }\n    );\n    return this.component.configurationRef;\n  }\n\n  private perfomAction(value: any, property: string | symbol, target: any) {\n    this.homologate(\n      property as string,\n      { ...target }[property],\n      value,\n      \"inline\",\n      \"programatic\",\n      (data: any) => this.toString(data),\n      (name: string, oldValue: any, originValue: any, parsedValue: any) => {\n        this.component.dispatchEvent(\n          AttributeChangedEvent.create(name, clone(oldValue), clone(originValue))\n        );\n        this.component.state[property] = value;\n        this.component.setAttribute(name, parsedValue);\n      }\n    );\n  }\n}\n","import { BaseComponent } from \"../../base.component\";\nimport { StageHandler } from \"./stageHandler\";\n\nexport class StateInitializationStage implements StageHandler {\n  component: BaseComponent<any, any>;\n  constructor(component: BaseComponent<any, any>) {\n    this.component = component;\n  }\n\n  init() {\n    console.log('Wake up ',  {\n      ...this.component.designSystemConfiguration,\n      ...this.component.configurationRef,\n    },);\n    \n    this.component.state = new Proxy(\n      {\n        ...this.component.designSystemConfiguration,\n        ...this.component.configurationRef,\n      },\n      {\n        set: (target, property, value) => {\n          this.component.dispatchEvent(\n            new CustomEvent(\"state-updated\", {\n              detail: {\n                property,\n                value,\n              },\n            })\n          );\n          target[property] = value;\n          return true;\n        },\n      }\n    );\n\n  }\n}\n","import { StylesResolver } from \"./styles.resolver\";\n\nexport class SCSSStylesResolver extends StylesResolver {\n  public formatStyles(styles: any): string {\n    let stylesStr: string = styles[0][1];\n\n    stylesStr = stylesStr.replace(\"<br>\", \"\");\n    stylesStr = stylesStr.replace(\"\\n\", \"\");\n\n    return stylesStr;\n  }\n}\n","export abstract class StylesResolver {\n  abstract formatStyles(styles: any): string;\n}\n\n","import { DOMHelpers } from \"../../helpers/DOMHelpers\";\nimport {\n  TemplateConfiguration,\n  Scope,\n} from \"./interfaces/template-configuration.interface\";\nimport { TemplateResolver } from \"./template.resolver\";\nimport { ViewEngine } from \"./view-engine\";\n\nexport interface Pattern {\n  pattern: RegExp;\n  tokenExtractor: (result: RegExpExecArray) => {\n    identifier: string;\n    match: string;\n  };\n}\n\nexport interface TransformedState {\n  [index: string]: string;\n}\n\nexport interface StatePropertyNamesMapper {\n  [index: string]: string;\n}\nexport class HTMLTemplateResolver extends TemplateResolver {\n  tagPattern: Pattern;\n  valuePattern: Pattern;\n\n  domHelpers: DOMHelpers;\n\n  constructor(domHelpers: DOMHelpers) {\n    super();\n    this.tagPattern = {\n      pattern: /([a-zA-Z0-9\\-]+)(@)/gm,\n      tokenExtractor: (result: RegExpExecArray) => {\n        return { identifier: result[1], match: result[0] };\n      },\n    };\n\n    (this.valuePattern = {\n      pattern: /(\\{\\{)([a-zA-Z0-9\\-]+)(\\}\\})/gm,\n      tokenExtractor: (result: RegExpExecArray) => {\n        return { identifier: result[2], match: result[0] };\n      },\n    }),\n      (this.domHelpers = domHelpers);\n  }\n  /**\n   * Turn a string HTML into a Node HTML\n   * @param template String HTML content that is wished to convert to HTML Node\n   * @returns Template turned to Node\n   */\n  convertTemplateToNodes(template: string): NodeListOf<Element> {\n    const domParser = new DOMParser();\n    const innerDocument: Document = domParser.parseFromString(\n      template,\n      \"text/html\"\n    );\n    const content: NodeListOf<Element> =\n      innerDocument.body.querySelectorAll(\":scope > *\");\n    return content;\n  }\n\n  private transformState(\n    scope: Scope,\n    viewEngine: ViewEngine\n  ): {\n    transformedState: TransformedState;\n    statePropertyNamesMapper: StatePropertyNamesMapper;\n  } {\n    const transformedState: TransformedState = {};\n    const statePropertyNamesMapper: StatePropertyNamesMapper = {};\n    for (const key in scope) {\n      if (Object.prototype.hasOwnProperty.call(scope, key)) {\n        const value = scope[key];\n\n        const transformedText = viewEngine.transformNameToLowerCamelCase(key);\n\n        statePropertyNamesMapper[key] = transformedText;\n        transformedState[transformedText] = value;\n      }\n    }\n\n    return {\n      transformedState,\n      statePropertyNamesMapper,\n    };\n  }\n\n  getTemplate(configuration: TemplateConfiguration): Array<Element> {\n    let template = configuration.template;\n    const viewEngine = new ViewEngine();\n    console.log(\"Constructor name: \");\n    console.log(this.constructor.name);\n\n    //Paso 1: Generar el scope con los valores transformados\n    console.log(\"Paso 1: Generar el scope con los valores transformados.\");\n    const { transformedState, statePropertyNamesMapper } = this.transformState(\n      configuration.scope || {},\n      viewEngine\n    );\n    console.table(transformedState);\n    console.table(statePropertyNamesMapper);\n\n    let transformedTemplate = template;\n    //Paso 2: Eliminar el prefix@ para\n    console.log(\"Paso 2: Eliminar el prefix@\");\n    transformedTemplate = this.resolvePattern(\n      this.tagPattern,\n      template,\n      transformedTemplate,\n      transformedState\n    );\n    console.log(transformedTemplate);\n    console.log(\"Scope :\", transformedState);\n\n    console.log();\n\n    //Paso 3: Convierte el string en nodos HTML\n    console.log(\"Paso 3: Convierte el string en nodos HTML\");\n    const templateNodes = this.convertTemplateToNodes(transformedTemplate);\n    console.log(templateNodes);\n    console.log();\n\n    console.log(\n      \"Paso 4: Se buscan las estructuras de control y se ejecuta el codigo dentro de ellas\"\n    );\n    const computedNodes = viewEngine.searchControlStructures(\n      templateNodes,\n      transformedState\n    );\n\n    console.log(\"All control structures by node: \");\n    console.log(computedNodes);\n\n    console.log();\n\n    const templateNodesFinal = [];\n\n    for (const computedNode of computedNodes) {\n      templateNodesFinal.push(...computedNode.fullNodes);\n    }\n\n    const t = templateNodesFinal.reduce((x: string, y: HTMLElement) => {\n      return (x += y.outerHTML);\n    }, \"\");\n\n    const r : Array<Element>= [];\n    this.convertTemplateToNodes(t).forEach((x) => {\n      r.push(x);\n    });\n    return r;\n  }\n\n  private resolvePattern(\n    patternConfig: Pattern,\n    template: string,\n    transformedTemplate: string,\n    scope: Scope\n  ): string {\n    const pattern = patternConfig.pattern;\n\n    let currentlyResult = pattern.exec(template);\n\n    while (!!currentlyResult) {\n      const { match, identifier } =\n        patternConfig.tokenExtractor(currentlyResult);\n\n      transformedTemplate = transformedTemplate.replace(\n        match,\n        scope[identifier] || match\n      );\n      currentlyResult = pattern.exec(template);\n    }\n    return transformedTemplate;\n  }\n\n  /**\n   * Map a array of items using a template html. The template will be mapped with the\n   * properties inside each item in items param, and then, that content will be put into the container.\n   * @param items Array of items with a open interface\n   * @param template Template to use\n   * @param selector Container where the items will be placed\n   *\n   * @example\n   *  items = [\n   *    {\n   *      name: 'loop'\n   *    },\n   *    {\n   *      name: 'boot'\n   *    }\n   *  ]\n   *\n   *  template = '<li>{name}</li>'\n   *\n   *  selector = 'div.any'\n   *\n   *  RESULT:\n   *\n   *  `<div class='any'>\n   *    <li>loop</li>\n   *    <li>boot</li>\n   *  </div>`\n   */\n  parseItemsIntoContainer(\n    items: Array<any>,\n    template: string,\n    selector: string,\n    shadowRoot: ShadowRoot\n  ): void {\n    const parsedItems: Array<Element>[] = this.mapItemsToTemplate(\n      items,\n      template\n    );\n    const container = shadowRoot.querySelector(selector) as HTMLUListElement;\n    this.domHelpers.removeAllChildren(container);\n    parsedItems.forEach((x) => x.forEach((y) => container.appendChild(y)));\n  }\n\n  mapItemsToTemplate(\n    items: Array<any>,\n    template: string\n  ): Array<Array<Element>> {\n    return items.map((x) =>\n      this.getTemplate({\n        template,\n        scope: {\n          ...x,\n        },\n      })\n    );\n  }\n}\n","import { TemplateConfiguration } from \"./interfaces/template-configuration.interface\";\n\nexport abstract class TemplateResolver {\n  abstract getTemplate(\n    configuration: TemplateConfiguration\n  ): Array<Element>;\n  abstract parseItemsIntoContainer(\n    items: Array<any>,\n    template: string,\n    selector: string,\n    shadowRoot: ShadowRoot\n  ): void;\n  abstract convertTemplateToNodes(template: string): NodeListOf<Element>;\n  abstract mapItemsToTemplate(\n    items: Array<any>,\n    template: string\n  ): Array<Array<Element>>;\n}\n","import { DOMHelpers } from \"../../helpers/DOMHelpers\";\nimport { TransformedState } from \"./HTMLTemplate.resolver\";\n\nconst RESPONSE_VARIABLE_NAME = \"__responnse__\";\nconst NODE_VARIABLE_NAME = \"__node__\";\nexport interface GenericControlStructure {\n  transpile: (expresion: string) => string;\n  resolve: (transpiledExpression: string) => string;\n}\n\nexport class ConditionControlStructure implements GenericControlStructure {\n  transpile(expression: string): string {\n    return `!!(${expression.replace(\"&amp\", \"&&\")})`;\n  }\n  resolve(transpiledExpression: string): string {\n    return `const ${RESPONSE_VARIABLE_NAME} = ${transpiledExpression} ? [${NODE_VARIABLE_NAME}.cloneNode(true)] : [];`;\n  }\n}\n\nexport class LoopControlStructure implements GenericControlStructure {\n  transpile(expression: string) {\n    const validPatterns = [\n      {\n        pattern: \"(\\\\w+)[ ]*,[ ]*(\\\\w+)[ ]*:[ ]*(\\\\w+)\",\n        resolver: (founded: RegExpExecArray) => {\n          return \"\";\n        },\n      },\n      {\n        pattern: \"(\\\\w+)[ ]*:[ ]*(\\\\w+)[ ]*,[ ]*(\\\\w+)\",\n        resolver: (founded: RegExpExecArray) => {\n          return `\nfor (let ${founded[1]} = ${founded[2]}; ${founded[1]} < ${founded[3]}; ${founded[1]}++) {\n  ${RESPONSE_VARIABLE_NAME}.push(${NODE_VARIABLE_NAME}.cloneNode(true));\n}\n          `;\n        },\n      },\n    ];\n\n    let transpiledExpression = \"\";\n    for (const patternConfig of validPatterns) {\n      const pattern = new RegExp(patternConfig.pattern);\n\n      let founded: RegExpExecArray | null = pattern.exec(expression);\n      console.log(patternConfig, founded, expression, 321);\n\n      if (founded) {\n        const resolver = patternConfig.resolver;\n        transpiledExpression = resolver(founded);\n        break;\n      }\n    }\n\n    return transpiledExpression;\n  }\n\n  resolve(transpiledExpression: string): string {\n    return `let ${RESPONSE_VARIABLE_NAME} = [];\\n${transpiledExpression}\\n`;\n  }\n}\n\nexport class ViewEngine {\n  controlStructurePipeline: { name: string; gear: GenericControlStructure }[];\n\n  prefixControlStructure: string;\n\n  domHelpers: DOMHelpers;\n\n  constructor() {\n    this.domHelpers = new DOMHelpers();\n    this.prefixControlStructure = \"#\";\n\n    this.controlStructurePipeline = [\n      {\n        name: \"if\",\n        gear: new ConditionControlStructure(),\n      },\n      {\n        name: \"for\",\n        gear: new LoopControlStructure(),\n      },\n    ];\n  }\n\n  public transformNameToLowerCamelCase(name: string) {\n    const fragments = name.split(\"-\");\n    let response = \"\";\n    if (fragments.length > 0) {\n      response = fragments[0];\n    }\n    if (fragments.length > 1) {\n      for (let i = 1; i < fragments.length; i++) {\n        const fragment = fragments[i];\n        response +=\n          fragment.charAt(0).toUpperCase() + fragment.slice(1, fragment.length);\n      }\n    }\n    return response;\n  }\n  /**\n   *\n   * @param state State of the component. It is a general object\n   * @returns A Javascript piece of code that has constants for each key inside the state.\n   */\n  private createScope(state: any) {\n    let context = \"\\n\";\n    for (const key in state) {\n      if (Object.prototype.hasOwnProperty.call(state, key)) {\n        const value = state[key];\n\n        const formattedKey = this.transformNameToLowerCamelCase(key);\n        if (typeof value === \"string\") {\n          context += `const ${formattedKey} = '${value}';\\n`;\n        } else {\n          context += `const ${formattedKey} = ${value};\\n`;\n        }\n      }\n    }\n    return context;\n  }\n\n  private evalControlStructureExpression(\n    controlStructureName: string,\n    expression: string,\n    state: TransformedState,\n    scope: string,\n    node: Element\n  ) {\n    const handler = this.controlStructurePipeline\n      .filter((x) => x.name === controlStructureName)\n      .pop();\n\n    let result = undefined;\n    const dependentProperties = [];\n\n    if (handler) {\n      const transpiledExpression = handler.gear.transpile(expression);\n      const efectiveExpression = handler.gear.resolve(transpiledExpression);\n      const evalCode = `${scope}\\n${efectiveExpression}`;\n      console.log(controlStructureName);\n\n      result = this.eval(evalCode, node);\n      for (const property in state) {\n        if (Object.prototype.hasOwnProperty.call(state, property)) {\n          const index = efectiveExpression.indexOf(property);\n          if (index > -1) {\n            dependentProperties.push(property);\n          }\n        }\n      }\n    }\n    return { result, dependentProperties };\n  }\n\n  private eval(evalCode: string, node: Element): any {\n    const bodyFunction = `${evalCode}\\nreturn ${RESPONSE_VARIABLE_NAME};`;\n    console.log(\"bodyFunction\", bodyFunction);\n\n    const evalFunction = new Function(NODE_VARIABLE_NAME, bodyFunction);\n    return evalFunction(node);\n  }\n  public searchControlStructures(\n    templateNodes: NodeListOf<Element>,\n    state: TransformedState\n  ) {\n    const response: any = [];\n    const scope = this.createScope(state);\n\n    templateNodes.forEach((node: Element) => {\n      const nodeMetada: any = {};\n\n      const fullNodes = [];\n      for (const controlStructure of this.controlStructurePipeline) {\n        const attribute = `${this.prefixControlStructure}${controlStructure.name}`;\n        if (node.hasAttribute(attribute)) {\n          const attributeValue = node.getAttribute(attribute) || \"\";\n\n          const result = this.evalControlStructureExpression(\n            controlStructure.name,\n            attributeValue,\n            state,\n            scope,\n            node\n          );\n\n          fullNodes.push(...result.result);\n\n          nodeMetada[controlStructure.name] = {\n            value: attributeValue,\n            ...result,\n          };\n        }\n      }\n      if (fullNodes.length === 0 && !( 'if' in nodeMetada) && !( 'for' in nodeMetada)) {\n        fullNodes.push(node.cloneNode(true));\n      }\n\n      response.push({\n        node,\n        metadata: nodeMetada,\n        fullNodes,\n      });\n    });\n\n    return response;\n  }\n\n  public getDependentsVariables() {}\n  // goli(nodes: NodeListOf<Node>): Array<Node> {\n  //   const response: Array<Node> = [];\n  //   nodes.forEach((node: Node) => {\n  //     let newNode: Node | null = null;\n\n  //     const children: NodeListOf<Node> = node.childNodes;\n  //     const controlStructurePattern = new RegExp(\n  //       `${this.prefixControlStructure}`\n  //     );\n\n  //     // let founded = controlStructurePattern.exec(templateString);\n\n  //     for (const attributeConfig of this.controlStructurePipeline) {\n  //       const attributeName = `${this.prefixControlStructure}${attributeConfig[\"name\"]}`;\n  //     }\n\n  //     newNode = { ...node };\n  //     this.domHelpers.removeAllChildren(newNode as HTMLElement);\n  //     const subTrees = this.goli(children);\n  //     for (const subTree of subTrees) {\n  //       newNode.appendChild(subTree);\n  //     }\n  //     response.push(newNode);\n\n  //     // newNode.chi\n  //   });\n  //   return response;\n  // }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","export { BaseComponent, BaseConfiguration, DesingSystemConfiguration } from \"./base.component\";\nexport { resolveComponentName } from \"./component-name-resolver\";\n// const a = resolveComponentName(\"gio\", { identifierName: \"hol\" });\n// console.log(a);\n// export  { resolveComponentName } from \"./component-name-resolver\";\n\n"],"names":[],"sourceRoot":""}