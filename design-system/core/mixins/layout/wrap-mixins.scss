//  ██╗....██╗██████╗..█████╗.██████╗.......███╗...███╗██╗██╗..██╗██╗███╗...██╗███████╗
//  ██║....██║██╔══██╗██╔══██╗██╔══██╗......████╗.████║██║╚██╗██╔╝██║████╗..██║██╔════╝
//  ██║.█╗.██║██████╔╝███████║██████╔╝█████╗██╔████╔██║██║.╚███╔╝.██║██╔██╗.██║███████╗
//  ██║███╗██║██╔══██╗██╔══██║██╔═══╝.╚════╝██║╚██╔╝██║██║.██╔██╗.██║██║╚██╗██║╚════██║
//  ╚███╔███╔╝██║..██║██║..██║██║...........██║.╚═╝.██║██║██╔╝.██╗██║██║.╚████║███████║
//  .╚══╝╚══╝.╚═╝..╚═╝╚═╝..╚═╝╚═╝...........╚═╝.....╚═╝╚═╝╚═╝..╚═╝╚═╝╚═╝..╚═══╝╚══════╝
//  ...................................................................................

@use '../../foundations/layout-foundations.scss' as *;
@use './breakpoints-mixins.scss' as *;
@use '../../configuration.scss' as *;

$wrap: (wrap, nowrap, wrap-reverse) !default;

@mixin wrap($breakpoints: $grid-breakpoints) {
  @each $breakpoint in map-keys($breakpoints) {
    @include media-breakpoint-up($breakpoint) {
      $infix: breakpoint-infix($breakpoint, $breakpoints);

      @each $i in $wrap {
        .#{$prefix-lib}#{$infix}-#{$i} {
          flex-wrap: $i;
        }
        @if ($breakpoint == xs) {
          @media ($max-width: $max-xs) {
            .#{$prefix-lib}-#{$breakpoint}-#{$i} {
              flex-wrap: $i;
            }
          }
        }
      }
    }
  }
}

// @include wrap();
